{"version":3,"sources":["network.js","App.js","index.js"],"names":["baseUrl","person","axios","post","then","response","data","get","id","delete","put","ScreenMessage","undefined","message","messageClass","warning","className","Search","clbSearch","search","type","value","onChange","Numbers","persons","deleteClb","filter","elem","name","indexOf","map","index","key","phone","onClick","NewName","clbSubmit","clbName","clbPhone","onSubmit","App","useState","setPersons","newName","setNewName","newPhone","setNewPhone","newSearch","setNewSearch","setMessage","getPersons","net","useEffect","showMessage","time","setTimeout","event","target","preventDefault","tmpPerson","find","catch","error","window","confirm","el","e","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b27340f.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = '/api/persons';\n\nlet newPerson = (person) => {\n    return axios\n        .post(baseUrl, person)\n        .then(response => response.data)\n//        .catch(error => console.log(\"Network error: \", error));\n}\n\nlet updatePerson = (person) => {\n    return axios\n        .put(`${baseUrl}/${person.id}`, person)\n        .then(response => response.data)\n//        .catch(error => console.log(\"Network error: \", error));\n}\n\nlet deletePerson = (id) => {\n    return axios\n        .delete(`${baseUrl}/${id}`)\n//        .catch(error => console.log(\"Network error: \", error));\n}\n\nlet getAll = () => {\n    return axios\n        .get(baseUrl)\n        .then(response => response.data);\n    //        .catch(error => console.log(\"Network error: \", error));\n}\n\nexport default {\n    newPerson,\n    getAll,\n    deletePerson,\n    updatePerson\n}","import React, { useState, useEffect } from 'react';\nimport net from './network';\n\nconst ScreenMessage = ({data}) => {\n  if(data===undefined) return null;\n\n  let {message, warning} = data; \n  let messageClass= warning ? \"netWarning\" : \"netMessage\" ;\n\n  return (\n    <div className={messageClass}>\n      {message}\n    </div>\n  ) \n}\n\nconst Search = ({ clbSearch, search }) => {\n  return (\n    <div>\n      Filter phonebook: <input type=\"text\" value={search} onChange={clbSearch} />\n    </div>\n  )\n}\n\nconst Numbers = ({ persons, search, deleteClb }) => {\n  return (\n    <>\n      <h2>Numbers</h2>\n      {persons\n        .filter((elem) => elem.name.indexOf(search) > -1)\n        .map((elem, index) => (\n          <p key={elem.id}>{elem.name} {elem.phone}\n            <button onClick={deleteClb(elem)}>Delete</button>\n          </p>))\n      }\n    </>\n)}\n\nconst NewName = ({ clbSubmit, name, clbName, phone, clbPhone }) => {\n  return (\n    <>\n      <h2>Add new person</h2>\n      <form onSubmit={clbSubmit}>\n        <div>\n          name: <input value={name} onChange={clbName} />\n        </div>\n        <div>\n          phone: <input value={phone} onChange={clbPhone} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([]); //array of cards-persons\n  const [newName, setNewName] = useState(''); //value of Name input\n  const [newPhone, setNewPhone] = useState(''); //value of phone number input\n  const [newSearch, setNewSearch] = useState(''); //value of search input\n  const [message, setMessage] = useState(undefined); //value of message component input data\n\n  //callbacks for inputs change  \n  const handleNameChange = (event) => setNewName(event.target.value);\n  const handlePhoneChange = (event) => setNewPhone(event.target.value);\n  const handleSearchChange = (event) => setNewSearch(event.target.value);\n\n  //calback for add new person button\n  const addPerson = (event) => {\n    event.preventDefault();\n    let tmpPerson = persons.find((elem) => elem.name === newName);\n  \n    if (tmpPerson === undefined) { //case when card is added\n      net.newPerson({ name: newName, phone: newPhone })\n        .then(response => {\n          //setPersons(persons.concat(response)); //works in case of one browser tab  \n          getPersons(); //in case of accessing fron multiple tabs we need to reask for the full list\n          setNewName('');\n          setNewPhone('');\n          showMessage(`${response.name} is successfully added to the phonebook!`);\n        })\n          .catch(error=>{\n          showMessage(`${error.response.data.error}`,true);\n          getPersons();\n        });\n    }\n    else if (tmpPerson.phone == newPhone) // persons name and phone matches with the one in the list\n      showMessage(`Warning! The card for ${newName} with phone ${newPhone} is already in the phonebook.`,true);\n    else {//case when phone number is updated\n      if (window.confirm(`${newName} is already in the phonebook.\\n \n        Do you want to update the phone: ${tmpPerson.phone} with ${newPhone}?`)) {\n        net.updatePerson({ ...tmpPerson, phone: newPhone })\n          .then(response => {\n            setPersons(persons.map((el) => {\n              if (el.id === response.id) return response;\n              return el;\n            }))\n            setNewName('');\n            setNewPhone('');\n            showMessage(`The phone number for ${response.name} is successfully updated!`);\n          })\n          .catch(error=>{\n            showMessage(`${tmpPerson.name} is already deleted from server!`,true);\n            getPersons();\n          })\n      }\n    }\n  }\n  //callback for delete person buttons\n  const deletePerson = (person) => {\n    return (e) => {\n      if (window.confirm(`Do you really want to delete ${person.name}?`))\n        net.deletePerson(person.id)\n        .then(response => {\n          getPersons();\n          showMessage(`${person.name} is successfully deleted from server!`);\n        })\n        .catch(error=>{\n          showMessage(`${person.name} is already deleted from server!`,true);\n          getPersons();\n        })\n    };\n  }\n  //get persons list from server\n  let getPersons = () => { net.getAll().then(response => setPersons(response)) }\n  useEffect(getPersons, []);\n\n  //wrapper for showing on and off message component\n  let showMessage = (message,warning=false,time=3) =>{\n    setMessage({message,warning});\n    setTimeout(()=>setMessage(undefined),time*1000)\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ScreenMessage data={message}/>\n      <Search search={newSearch} clbSearch={handleSearchChange} />\n      <NewName\n        clbSubmit={addPerson}\n        name={newName}\n        clbName={handleNameChange}\n        phone={newPhone}\n        clbPhone={handlePhoneChange}\n      />\n      <Numbers search={newSearch} persons={persons} deleteClb={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css'\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}